import numpy as np
#import pylab as pl
from scipy.fftpack import fft, ifft
from scipy.signal import correlate

#----INPUTS-------------------------------------------------------------------
sampleRate = 1/20000
numberSamples = 1024

#Sine wave 1 parameters
amplitude1 = 5    # Volts
frequency1 = 300  # hz
phase1 = 0        # 0 -  2*pi

#Sine wave 2 parameters
amplitude2 = 4.5    # Volts
frequency2 = 300  # hz
phase2 = 1        # 0 -  2*pi

#----DO SOME WORK-------------------------------------------------------------
x = np.linspace(0.0, sampleRate*numberSamples, numberSamples)
#print(x)

#y1 = amplitude1*(np.sin(2*np.pi*frequency1*x+phase1))
#y2 = amplitude2*(np.sin(2*np.pi*frequency2*x+phase2))
##print(y1)


x = np.array(x)
y1 = np.array([505,511,513,514,516,513,512,510,509,508,505,502,498,496,491,
               488,485,480,473,472,468,461,457,453,446,443,440,434,433,432,
               429,432,430,430,427,430,430,431,434,437,440,445,446,447,451,
               454,455,460,465,471,474,482,486,490,498,502,507,514,519,521,
               528,532,538,543,547,551,556,561,565,569,573,577,579,586,587,
               590,593,587,584,583,573,566,565,558,553,548,542,531,525,521,
               514,506,506,499,491,486,481,475,467,461,460,455,447,443,440,
               436,434,433,429,428,429,427,428,431,431,431,433,434,435,435,
               441,445,448,450,454,461,463,468,475,483,487,492,498,501,503,
               506,512,516,518,521,522,523,523,524,528,526,526,522,523,521,
               522,518,513,509,505,500,496,491,487,481,478,476,473,468,465,
               464,462,457,455,454,452,449,445,443,441,441,441,438,437,437,
               441,445,448,452,455,458,462,464,468,470,476,482,488,489,497,
               504,511,516,522,529,535,541,548,554,557,567,571,572,578,582,
               587,593,598,604,609,615,617,625,627,625,621,616,608,600,598,
               594,591,587,581,573,569,564,558,554,551,548,539,531,526,518,
               511,505,498,494,486,478,474,468,465,463,458,457,455,455,455,
               458,460,463,466,467,469,474,480,485,491,496,498,504,507,512,
               515,521,525,526,531,534,537,541,543,547,549,550,552,554,556,
               558,560,558,555,552,554,549,546,543,542,537,534,528,525,522,
               518,515,513,507,504,501,498,496,491,490,482,480,476,471,466,
               464,460,459,461,461,461,463,462,462,466,468,468,468,472,475,
               477,483,486,492,497,505,512,518,527,532,537,538,542,549,554,
               561,566,569,575,580,584,587,592,597,602,607,610,612,616,619,
               623,616,614,607,601,593,590,588,586,581,578,572,566,563,556,
               552,548,547,539,531,528,519,513,505,503,496,490,485,482,479,
               476,474,470,468,466,468,470,474,474,476,482,486,488,493,499,
               506,511,515,521,524,531,537,543,545,551,557,563,565,570,575,
               578,582,584,582,582,583,583,584,586,585,580,580,577,577,574,
               571,566,566,562,556,554,551,545,541,534,528,520,519,512,505,
               500,497,491,490,487,483,483,483,480,479,479,478,478,478,475,
               477,478,477,480,484,486,488,493,497,500,506,512,515,519,525,
               529,532,539,543,548,553,557,566,572,580,583,587,591,593,599,
               602,606,613,617,619,619,623,618,613,610,601,592,586,580,577,
               571,566,558,552,546,539,533,530,527,522,517,513,504,496,490,
               486,477,473,470,464,461,458,457,453,452,452,449,452,455,455,
               455,458,462,462,467,473,479,479,486,489,494,501,506,511,516,
               521,525,530,534,539,543,544,551,552,553,553,556,557,559,561,
               559,559,559,558,558,555,552,546,542,538,531,525,519,515,510,
               506,501,498,492,488,485,482,482,479,477,478,476,473,471,471,
               467,469,467,467,467,466,466,468,470,475,479,482,486,488,494,
               497,503,508,514,518,522,526,532,536,543,547,553,559,563,566,
               569,575,579,584,584,589,592,593,594,598,599,600,601,605,605,
               600,594,589,581,577,573,568,566,559,549,538,534,529,522,518,
               518,511,503,504,495,487,481,477,471,465,460,456,452,449,445,
               440,439,438,435,436,440,440,442,445,446,449,452,455,460,462,
               467,471,478,480,486,491,496,500,505,508,509,513,517,517,521,
               525,525,524,528,529,530,530,531,529,532,528,526,522,520,515,
               514,511,506,500,497,493,491,487,487,483,483,479,475,470,466,
               463,459,454,449,447,443,440,440,437,437,438,442,442,446,449,
               452,454,457,461,464,470,473,475,480,484,490,498,504,508,515,
               518,522,524,531,534,537,543,549,551,555,558,562,568,575,578,
               584,589,593,597,598,598,596,591,586,577,568,565,561,556,550,
               542,533,528,521,514,511,508,505,497,491,488,478,472,467,462,
               455,450,446,441,439,436,433,429,429,428,429,430,432,431,434,
               433,433,436,437,438,442,446,450,452,458,463,466,474,476,481,
               486,491,493,494,495,497,500,501,501,504,504,505,508,508,506,
               507,505,502,503,500,496,488,485,479,472,467,464,458,454,448,
               445,440,437,432,428,427,421,419,415,410,409,405,402,400,399,
               398,397,397,399,398,400,400,400,399,401,402,405,409,411,411,
               415,417,419,426,432,440,447,450,453,458,462,469,471,476,483,
               489,491,496,502,508,511,519,524,528,531,532,533,534,528,521,
               516,508,503,494,491,486,480,474,466,463,455,450,447,445,441,
               432,433,428,421,413,407,403,399,396,396,394,394,395,395,394,
               395,394,395,397,399,399,402,405,405,410,414,418,424,431,437,
               443,451,455,461,468,475,481,483,488,495,501,503,506,510,511,
               513,517,518,520,521,524,523,525,528,523,525,523,521,518,513,
               509,503,497,494,492,490,485,486,484,482,479,480,475,474,474,
               472,470,468,466])
y2 = np.array([503,505,509,513,513,514,518,518,520,520,520,516,512,511,508,
               506,502,501,494,490,489,484,479,479,473,470,466,467,461,461,
               459,463,461,463,459,459,457,456,456,460,461,459,461,461,463,
               463,467,468,471,476,479,482,485,486,487,489,494,497,503,504,
               506,511,515,515,518,520,522,525,529,535,539,545,546,551,554,
               558,561,561,563,565,566,567,569,570,569,567,561,550,542,535,
               530,525,523,520,515,508,501,499,497,497,499,497,496,493,490,
               485,481,475,474,470,465,463,459,453,451,451,453,449,449,449,
               447,448,448,448,450,452,452,454,458,463,466,471,473,477,480,
               485,488,493,493,495,499,499,502,504,504,506,505,504,504,507,
               509,507,509,508,505,502,503,501,502,501,501,495,492,488,485,
               481,481,479,481,478,479,478,476,475,474,475,475,472,473,474,
               473,474,474,478,477,478,478,481,484,483,487,492,497,498,504,
               506,512,514,515,521,525,527,530,536,538,540,543,542,546,549,
               554,559,567,569,570,575,579,581,590,593,597,599,604,605,608,
               608,607,604,602,593,587,583,581,577,576,572,568,560,556,548,
               549,546,537,531,529,521,513,507,502,500,493,489,487,487,487,
               484,483,483,483,484,485,487,491,493,492,495,496,494,493,499,
               502,503,506,508,506,507,510,513,514,516,514,516,518,520,526,
               529,530,531,532,531,530,532,532,529,532,536,534,531,532,531,
               530,532,530,526,522,518,516,512,510,507,503,497,495,494,490,
               489,488,485,481,479,477,476,475,475,477,478,479,481,484,485,
               486,490,494,496,500,506,512,516,521,525,527,527,529,531,535,               
               540,542,543,541,543,543,544,548,551,553,554,560,561,565,567,
               572,574,579,584,591,593,597,599,597,595,591,585,579,577,570,
               570,566,561,556,549,543,538,540,538,537,533,532,528,525,522,
               518,513,509,506,506,505,500,498,497,498,501,502,504,505,510,
               514,515,517,520,518,522,526,528,528,533,537,542,542,544,550,
               554,556,561,562,565,567,569,569,572,570,569,564,561,560,559,
               558,556,556,555,553,552,555,552,552,548,547,542,538,534,526,
               520,519,518,516,514,514,511,510,512,510,512,510,506,506,504,
               503,501,497,495,492,490,486,486,489,489,492,495,501,505,508,
               511,514,516,521,523,530,537,542,546,553,554,557,560,562,562,
               567,570,572,573,572,571,574,578,578,582,585,583,586,588,586,
               583,580,569,559,555,550,545,544,540,535,533,527,522,523,525,
               525,525,524,522,515,512,502,497,488,481,480,473,471,467,466,
               465,463,467,468,473,477,479,477,480,483,481,485,487,487,493,
               496,499,504,511,512,518,524,528,530,536,537,539,542,544,543,
               543,540,540,540,538,535,534,533,530,529,523,523,517,516,515,
               511,510,508,502,502,503,502,502,499,499,499,494,491,492,491,
               487,487,487,486,486,487,487,485,483,488,489,488,492,492,496,
               496,501,502,505,505,510,514,517,521,528,530,532,538,541,542,
               545,544,545,547,548,548,546,547,550,549,548,548,552,554,554,
               558,559,560,564,567,570,570,566,562,555,547,537,533,530,526,
               522,520,515,511,504,503,503,502,503,499,495,494,488,483,477,               
               472,467,460,457,457,452,449,447,446,446,447,449,451,453,456,
               460,459,461,459,459,459,461,464,466,466,466,469,471,476,479,
               480,484,484,489,493,492,494,498,498,502,504,507,504,508,508,
               508,510,512,510,508,508,505,501,499,496,492,487,482,476,473,
               471,470,469,469,467,469,467,469,467,469,464,463,464,463,461,
               464,466,467,472,475,480,483,483,486,489,491,493,494,499,500,
               502,505,505,506,508,513,516,520,524,525,530,532,534,540,541,
               545,549,553,551,557,558,561,566,569,570,570,572,570,565,560,
               552,546,541,535,532,529,523,521,518,512,508,505,504,499,496,
               494,492,489,484,481,478,478,475,469,469,467,463,461,457,455,
               451,446,445,447,450,450,451,454,454,454,457,461,464,465,467,
               468,473,475,472,476,475,478,480,482,483,488,490,493,494,497,
               498,494,494,496,493,493,493,491,491,488,487,489,485,484,481,
               476,473,468,465,461,459,457,453,450,448,445,443,441,439,439,
               438,434,432,430,428,424,424,422,422,421,421,421,421,423,422,
               423,426,429,433,436,439,440,442,448,451,455,462,465,473,477,
               479,483,486,487,491,494,498,498,501,499,499,500,499,502,504,
               510,509,513,514,515,514,508,500,492,485,478,476,474,471,467,
               463,463,459,459,459,461,462,463,466,463,462,458,455,452,447,
               443,442,438,436,434,430,430,435,432,433,437,440,444,449,454,
               454,456,458,463,467,473,476,480,484,490,495,500,503,506,509,
               511,514,517,523,521,524,526,526,528,530,535,534,537,536,539,
               536,533,533,532,533,533,531,528,521,522,517,515,513,510,508,
               507,507,504,502])


import matplotlib.pyplot as plt
plt.grid()
plt.plot(x, y1, x, y2)
plt.show()

xFFT = np.linspace(00.0, 1.0/(2.0*sampleRate), numberSamples/2)
y1FFT = fft(y1)
y2FFT = fft(y2)

import matplotlib.pyplot as plt
plt.plot(xFFT, 2.0/numberSamples * np.abs(y1FFT[0:numberSamples/2]),
         xFFT, 2.0/numberSamples * np.abs(y2FFT[0:numberSamples/2]))
plt.grid()
plt.xlim(0,500)
plt.ylim(0,200)
plt.show()

window = np.hanning(numberSamples)
import matplotlib.pyplot as plt
plt.grid()
plt.plot(x, window)
plt.show()

y1Window = y1 * window
y2Window = y2 * window

import matplotlib.pyplot as plt
plt.grid()
plt.plot(x, y1Window,x, y2Window)
plt.show()

y1FFTWindow = fft(y1Window)
y2FFTWindow = fft(y2Window)

import matplotlib.pyplot as plt
plt.plot(xFFT, 2.0/numberSamples * np.abs(y1FFTWindow[0:numberSamples/2]),
         xFFT, 2.0/numberSamples * np.abs(y2FFTWindow[0:numberSamples/2]))
plt.grid()
plt.xlim(0,500)
plt.ylim(0,200)
plt.show()


# Cross correlation, from: http://dsp.stackexchange.com/questions/736/how-do-i-implement-cross-correlation-to-prove-two-audio-files-are-similar
#a = np.array([1,2,3,4,5,6])
##from: http://docs.scipy.org/doc/numpy/reference/generated/numpy.zeros.html
#b = np.zeros(3,dtype=np.int)  
#c = np.append(a,b)
#print(a)
#print(c)
##from: http://stackoverflow.com/questions/6771428/most-efficient-way-to-reverse-a-numpy-array
#d = np.fliplr([a])[0]   
#print (d)

y1Zeros = np.append(y1Window, np.zeros(1024,dtype=np.int))
y2Zeros = np.append(y2Window, np.zeros(1024,dtype=np.int))
y2ZerosReversed = np.fliplr([y2Zeros])[0]
correlation = ifft(fft(y1Zeros)*fft(y2ZerosReversed))

import matplotlib.pyplot as plt
#plt.plot(xFFT, 2.0/numberSamples * np.abs(correlation[0:numberSamples/2]))
plt.plot(correlation)
plt.grid()
plt.show()

corr = correlate(y1Window,y2Window)
import matplotlib.pyplot as plt
#plt.plot(xFFT, 2.0/numberSamples * np.abs(correlation[0:numberSamples/2]))
plt.plot(corr)
plt.grid()
plt.show()
